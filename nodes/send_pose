#!/usr/bin/env python3
import numpy as np
import argparse

import roslib; roslib.load_manifest('freemovr_engine')
import rospy
import freemovr_engine.display_client as display_client
from geometry_msgs.msg import Pose
import tf.transformations

def send_pose(positionstr, verbose, freq, amplitude):
    if positionstr:
        try:
            position = map(float,positionstr.split(','))
            assert len(position) == 3
        except:
            positionstr = None

    pub = rospy.Publisher('pose', Pose)
    while not rospy.is_shutdown():
        t = rospy.get_time()

        if not positionstr:
            x = amplitude*np.sin( t*2*np.pi/5.0 )
            #y = 0.4*np.cos( t*2*np.pi/15.0 )
            y = 0
            z = 0.5*amplitude*np.cos( t*2*np.pi/15.0 ) + 0.5
            position = [x,y,z]

        msg = Pose()

        for i in range(3):
            setattr(msg.position,'xyz'[i], position[i])

        theta = (t*2*np.pi / 17.0) % (2*np.pi)
        quat = tf.transformations.quaternion_about_axis(  theta, (0,0,1) )
        for i in range(4):
            setattr(msg.orientation,'xyzw'[i], quat[i])

        if verbose:
            print(msg)

        pub.publish(msg)
        rospy.sleep(1.0/freq)

if __name__ == '__main__':
    rospy.init_node('send_pose')

    parser = argparse.ArgumentParser()
    parser.add_argument('--xyz', type=str, help='comma separated position')
    parser.add_argument('--verbose', action='store_true', help='print message to command line')
    parser.add_argument('--frequency', type=float, help='frequency to send pose (default: 100)', default=100)
    parser.add_argument('--amplitude', type=float, help='amplitude of movement (default:0.4)', default=0.4)

    parser.add_argument('--reset-stimulus', action='store_true',
                        help='reset the display servers')

    argv = rospy.myargv()
    args = parser.parse_args(argv[1:])

    if args.reset_stimulus:
        display_client.DisplayServerProxy.set_stimulus_mode(
            'Stimulus3DDemo')

    send_pose(args.xyz, args.verbose, args.frequency, args.amplitude)

